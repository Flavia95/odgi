LIST OF COMMANDS
----------------
./odgi <command> [options]

--build.. convert gfa in odgi i.e. variation graph

Options:

-g, GFA input file
-o, ODGI output file 


- *<<g = odgi.graph()>>*                                 .. define graph
- *<<load,load>>*                                        .. load the graph from the given file
- *<<append_step,append_step>>*                          .. append a visit to a node to the given path and add a path steps
- *<<apply_ordering,apply_ordering>>*                    .. reorder the graph's internal structure to match that given
- *<<apply_orientation,apply_orientation>>*              .. modify the node to which the specified handle corresponds  
- *<<apply_path_ordering,apply_path_ordering>>*          .. reorder the graph's paths as given 
- *<<clear,clear>>*                                      .. clears all added nodes and edgesr
- *<<clear_paths,clear:paths>>*                          .. clears all path thath already stored 
- *<<combine_handles,combine_handles>>*                  .. join the handles specified in a new node
- *<<create_edge,create_edge>>*                          ..  create edge that connecting two given handles
- *<<create_handle,create_handle>>*                      ..  create a new node and return the handle.
- *<<create_path_handle,create_path_handle>>*            ..  create a path but the name given to the path must not already exist
- *<<destroy_handle,destroy_handle>>*                    ..  remove the node belonging to the given handle and all of its edges
- *<<destroy_path,destroy_path>>*                        ..  remove the given path
- *<<divide_handle,divide_handle>>*                      ..  split a node (remember that the node is associated with a sequence) and returns the list of handle
- *<<edge_handle,edge_handle>>*                          ..  for the given pair of handle return the edge
- *<<flip,flip>>*                                        ..  reverse the orientation of the handle
- *<<follow_edges,follow_edges>>*                        .. starting at a given node, list the edges
- *<<for_each_handle,for_each_handle>>*                  ..  iterate over all the nodes in the graph
- *<<for_each_path_handle,for_each_path_handle>>*        ..  iterate over all the path in the graph 
- *<<for_each_step_in_path,for_each_step_in_path>>*      ..  iterate over all steps in the graph 
- *<<for_each_step_on_handle,for_each_step_on_handle>>*  ..  getting the steps on each handle, 
- *<<forward,forward>>*                                  .. return the forward of the handle  
- *<<get_degree,get_degree>>*                            .. return the degree of the given handle 
- *<<get_handle,get_handle>>*                            .. pass a value of a node identifier(id)
- *<<get_handle_of_step,get_handle_of_step>>*            .. return the handle of the step 
- *<<get_id,get_id>>*                                    .. return the id of the given node
- *<<get_is_circular,get_is_circular>>*                  ..  if the path is circular returns True
- *<<get_is_reverse,get_is_reverse>>*                    ..  false,by default,we get the forward handle.
- *<<get_lenght,get_lenght>>*                            ..  return the lenght of the node referred to by the handle
- *<<get_next_step,get_next_step>>*                      ..  returns a handle to the next step on the path.
- *<<get_node_count,get_node_count>>*                    ..  return the numbers of the nodes in the graph
- *<<get_path,get_path>>*                                ..  return the path of a given step handle  
- *<<get_path_count,get_path_count>>*                    ..  return the path count in the graph
- *<<get_path_handle,get_path_handle>>*                  ..  return the path handle for the named path
- *<<get_path_handle_of_step,get_path_handle_of_step>>*  ..  returns a handle to the path that an step is on
- *<<get_path_name,get_path_name>>*                      ..  return the path name for a given path handle 
- *<<get_previous_step,get_previous_step>>*              ..  return a handle to the previous step on the path 
- *<<get_sequence,get_sequence>>*                        ..  return sequence of the given id of the handle 
 
- *<<get_step_count,get_step_count>>*                    ..  return the step count of a given handle 
- *<<has_edge,has_edge>>*                                ..  return true if the given edge exists in the graph
- *<<has_next_step,has_next_step>>*                      ..  return true if the step isn't the last on the path 
- *<<has_node,has_node>>*                                ..  return true if the given node id is in the graph
- *<<has_path,has_path>>*                                ..  return true if the given name of the path exists
- *<<has_previous_step,has_previous_step>>*              ..  return true if the step isn't the first step on the path
- *<<insert_step,insert_step>>*                          ..  insert a visit to a node to the given path between the given steps
- *<<is_empty,is_empty>>*                                ..  return false if the path isn't empty
- *<<is_path_end,is_path_end>>*                          ..  return true if the step hand in an end handle
- *<<is_path_front_end,is_path_front_end>>*              ..  return true if the step handle is a front end handle  

- *<<get_path_count,get_path_count>>*                    ..  return the path count in the graph
- *<<get_path_handle,get_path_handle>>*                  .. return the path handle for the named path
- *<<get_path_handle_of_step,get_path_handle_of_step>>*  ..  returns a handle to the path that an step is on
- *<<get_path_name,get_path_name>>*                      ..  return the path name for a given path handle 
- *<<get_previous_step,get_previous_step>>*              ..  return a handle to the previous step on the path 
- *<<get_sequence,get_sequence>>*                        ..  return sequence of the given id of the handle 




[[load]]

=== import odgi
=== g = odgi.graph()
=== g.load('/path/to/gfa')

load the graph from the given file

*-arg0:: 

Load the graph from the given file,str


[[append_step]]

=== import odgi
=== g = odgi.graph()
=== g.load('/path/to/gfa')

append a visit to a node to the given path and add a path steps

*-arg0::

g.path_handle = pass the path name as a string

*-arg1::
g.handle = an oriented traversal of a node, for example pass a value of a node identifier (id) with g.get_handle

[[apply_ordering]]

=== import odgi
=== g = odgi.graph()
=== g.load('/path/to/gfa')

reorder the graph's internal structure to match that given. Optionally compact the id space of the graph to match the ordering, from 1->|ordering|. (???????????)                          

*-arg0::
order: List[odgi.handle], 

*-arg1::
compact_ids: bool = False) -> None







